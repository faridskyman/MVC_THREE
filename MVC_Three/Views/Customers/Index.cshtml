@model List<MVC_Three.Models.Customer>
@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}


<h2>Customers</h2>

@* new { Controller = "Customers" } fixes the problem where button has ?length=9, this seems to be the
    cause of new record having issues (cant add records apprantly)*@
@Html.ActionLink(linkText: "New Customer", actionName: "New", routeValues: new { Controller = "Customers" }, htmlAttributes: new { @class = "btn btn-primary" })

<br /><br />
<table class="table table-bordered table-hover" id="customers">
    <thead>
        <tr>
            <th scope="col">Name</th>
            <th scope="col">Membership Type</th>
            <th scope="col">Options</th>
            <th>Delete</th>
        </tr>
    </thead>
    @*@foreach (var customer in Model)
    {
    <tr>
        <td scope="row"><a href="/Customers/details/@customer.Id">@customer.Name</a></td>*@
        @*
        we cant call membershiptype (ref table like this as )
        EF only loaded customers table only
        when we do this we get NULL
        to solve do EAGER LOADING (see customer controller)
        <td>@customer.MembershipType.DiscountRate</td>*@
        @*<td>@customer.MembershipType.Name</td>
        <td>*@
            @*below when the last param is missing 'null', the link will all show length=9
                so takenote
                *@
            @*@Html.ActionLink("Edit", "Edit", "Customers", new { Id = customer.Id }, null)
            

        </td>

        <td>
            <button data-customer-id="@customer.Id" class="btn-link js-delete">Delete</button>
        </td>
    </tr>

    }*@
</table>

@section scripts
{
    <script>
        $(document).ready(function () {

            //link up to data table
            //get ref to the table and apply DataTable function to it
            //get the result of the api call and store it in table?
            //  anyways we did this so that on delete, the record is also removed from
            //  the internal json list too (refer to delete action below...)
            var table = $('#customers').DataTable({
                ajax: {
                    url: "/api/customers",
                    dataSrc: "" //the return data from ws is already the customer object, no need to identify the source of the data anymore.
                },
                columns: [
                    {
                        data: "name",
                        render: function (data, type, customer) {
                            return "<a href='/customers/edit/" + customer.id + "'>" + customer.name + "</a>";
                        }
                    },
                    {
                        data: "membershipType.name"
                    },
                    {
                        data: "id",
                        render: function (data) {
                            return "<button class='btn-link js-delete' data-customer-id=" + data + ">Delete</button>";
                        }
                    }
                ]
            });


            $("#customers").on("click", ".js-delete", function () {
                var button = $(this) // get reference to the clicked button
                bootbox.confirm("are you sure?", function (result) {
                    if (result) {
                        $.ajax({
                            url: "/api/customers/" + button.attr("data-customer-id"),
                            method: "DELETE",
                            success: function () {
                                console.log("Delete Success!");
                                //delete the entire TR record that has been deleted
                                // below only removes the TR, we are now going to remove it
                                //      from the json list (since we are no handling this on
                                //      client side)
                                //button.parents("tr").remove();
                                //  table is the internal json list
                                //  button.parents("tr"), is ref to the row that is deleted
                                //  .remove(), removes it from the list
                                //  .draw() commands dataTable to redraw the table (hence exclusing the del row)
                                //  as prev way will still show (del rec) it on search.
                                table.row(button.parents("tr")).remove().draw();
                            }

                        });
                    }
                });

                //if (confirm("are you sure?")) {
                    //alert("deleting...");
                    
                 
            });
        });
    </script>
    
}